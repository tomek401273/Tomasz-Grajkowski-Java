
//        SaySomething saySomething = new SaySomething();
//        saySomething.say();
////////////////////////////////////////////////////////////////////////////////////////////////////////
//        Procesor procesor = new Procesor();
//        ExecuteSaySomething executeSaySomething = new ExecuteSaySomething();
//        procesor.execute(executeSaySomething);
////////////////////////////////////////////////////////////////////////////////////////////////////////
//        Procesor procesor = new Procesor();
//        Executor codeToExecute = () -> System.out.println("This is example text. z lambdy ");
//        procesor.execute(codeToExecute);

//        ExperssionExecutor expressionExecutor = new ExperssionExecutor();
//
//        System.out.println("Calculating expressions with lambdas");
//        expressionExecutor.executeExpression(10, 5, (a, b) -> a + b);
//        expressionExecutor.executeExpression(10, 5, (a, b) -> a - b);
//        expressionExecutor.executeExpression(10, 5, (a, b) -> a * b);
//        expressionExecutor.executeExpression(10, 5, (a, b) -> a / b);
//
//        System.out.println("Calculating expressions with method references");
//        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::multiplyAByB);
//        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::addAToB);
//        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::subBFromA);
//        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::divideAByB);
//
//        System.out.println("Poem Beautifiler");
//        PoemBeautifiler poemBeautifiler = new PoemBeautifiler();
//
//        poemBeautifiler.beautify("Computer", (a) -> a.toUpperCase());
//        poemBeautifiler.beautify("lubie placki", (b) -> b.toUpperCase()+" "+b.toLowerCase()+" "+b.toUpperCase());
//        poemBeautifiler.beautify("Mouse", (c) -> "ABC"+ c +"ABC");
//        poemBeautifiler.beautify("ABC", (d) -> d.substring(d.length()-1)+d.substring(d.length()-2)+d.substring(d.length()-3));
//
//        System.out.println("Using Stream to generate even numbers from 1 to 20");
//        NumberGenerator.generateEven(20);

//        People.getList().stream()
//                .forEach(System.out::println);
//        System.out.println();
//        System.out.println("Length grether than 11");
//        People.getList().stream()
//                .filter(s -> s.length() > 11)
//                .forEach(System.out::println);
//
//        System.out.println();
//        System.out.println("Kaskadowe łączenie operacji na Steam");
//        People.getList().stream()
//                .map(String::toUpperCase)
//                .filter(s -> s.length() > 11)
//                .map(s -> s.substring(0, s.indexOf(' ') + 2) + ".")
//                .filter(s -> s.substring(0, 1).equals("M"))
//                .forEach(System.out::println);

//        System.out.println();
//        System.out.println("Steam na kolekcjach z dowolnymi biektami");
//        BookDirectory theBookDirectory = new BookDirectory();
//        theBookDirectory.getList().stream()
//                .filter(book -> book.getYearOfPublication() > 2005)
//                .forEach(System.out::println);

//        System.out.println();
//        System.out.println("Operacje terminalne - kolektory-- List");
//        BookDirectory theBookDirectory = new BookDirectory();
//        List<Book> theResultListOfBooks = theBookDirectory.getList().stream()
//                .filter(book -> book.getYearOfPublication() > 2005)
//                .collect(Collectors.toList());
//
//        System.out.println("# elements: " + theResultListOfBooks.size());
//        theResultListOfBooks.stream()
//                .forEach(System.out::println);

//        System.out.println();
//        System.out.println("Operacje terminalne - kolektory-- Map");
//        BookDirectory theBookDirectory = new BookDirectory();
//
//        Map<String, Book> theResultMapOfBooks = theBookDirectory.getList().stream()
//                .filter(book -> book.getYearOfPublication() > 2005)
//                .collect(Collectors.toMap(Book::getSignature, book -> book));
//
//        System.out.println("# elements: " + theResultMapOfBooks.size());
//        theResultMapOfBooks.entrySet().stream()
//                .map(entry -> entry.getKey() + ": " + entry.getValue())
//                .forEach(System.out::println);


        System.out.println();
        System.out.println("Operacje terminalen - kolektory - joining");
        BookDirectory theBookDirectory = new BookDirectory();
        String theResultStringOfBooks = theBookDirectory.getList().stream()
                .filter(book -> book.getYearOfPublication() > 2005)
                .map(Book::toString)
                .collect(Collectors.joining(",\n","<<",">>"));

        System.out.println(theResultStringOfBooks);